From 1b20d36fe0841e9467e4fe40d6c93d5476ea368e Mon Sep 17 00:00:00 2001
From: iot <rami.jung@samsung.com>
Date: Tue, 22 May 2018 16:58:53 +0900
Subject: [PATCH] Reduce memory usage in blockwise by transaction

as postponing creating coap_new_transaction in blockwise
it brings the reduction of peak memory.


( make DYNAMIC=1 SECURE=0 DEBUG=0 TCP=1 EASYSETUP=1)
server_block_linux
  as is  : 20.31 KB
  to be  : 19.77 KB

Change-Id: I27dd0b89b7f50fbfa67bed09cbb536f8bdbd3981
Signed-off-by: iot <rami.jung@samsung.com>
---
 messaging/coap/engine.c | 55 ++++++++++++++++++++++++++++++++++++++-----------
 1 file changed, 43 insertions(+), 12 deletions(-)

diff --git a/messaging/coap/engine.c b/messaging/coap/engine.c
index e42eafdb..e0e8bbe9 100644
--- a/messaging/coap/engine.c
+++ b/messaging/coap/engine.c
@@ -239,10 +239,16 @@ coap_receive(oc_message_t *msg)
         }
       }
 
+#ifndef OC_BLOCK_WISE
       /* create transaction for response */
+      if (transaction){
+        OC_ERR("transaction should be NULL");
+        goto init_reset_message;
+      }
       transaction = coap_new_transaction(message->mid, &msg->endpoint);
-
-      if (transaction) {
+      if (transaction)
+#endif /* !OC_BLOCK_WISE */
+      {
 #ifdef OC_BLOCK_WISE
         const char *href;
         int href_len = coap_get_header_uri_path(message, &href);
@@ -281,7 +287,7 @@ coap_receive(oc_message_t *msg)
                 coap_set_header_block1(response, block1_num, block1_more,
                                        block1_size);
                 request_buffer->ref_count = 1;
-                goto send_message;
+                goto send_message_with_transaction;
               } else {
                 OC_DBG("received all blocks for payload");
                 coap_set_header_block1(response, block1_num, block1_more,
@@ -294,7 +300,7 @@ coap_receive(oc_message_t *msg)
             }
           }
           OC_ERR("could not create block-wise request buffer");
-          goto init_reset_message;
+          goto init_reset_message_with_transaction;
         } else if (block2) {
           OC_DBG("processing block2 option");
           unsigned int accept = 0;
@@ -324,7 +330,9 @@ coap_receive(oc_message_t *msg)
               coap_set_header_etag(response, response_state->etag,
                                    COAP_ETAG_LEN);
               response_buffer->ref_count = more;
-              goto send_message;
+
+              goto send_message_with_transaction;
+
             } else {
               OC_ERR("could not dispatch block");
             }
@@ -346,7 +354,7 @@ coap_receive(oc_message_t *msg)
                                             request_buffer, 0, incoming_block,
                                             (uint16_t)incoming_block_len))) {
                     OC_ERR("could not create buffer to hold request payload");
-                    goto init_reset_message;
+                    goto init_reset_message_with_transaction;
                   }
                   if (message->uri_query_len > 0) {
                     oc_new_string(&request_buffer->uri_query,
@@ -361,7 +369,7 @@ coap_receive(oc_message_t *msg)
                      "block_num > 0");
             }
           }
-          goto init_reset_message;
+          goto init_reset_message_with_transaction;
         } else {
           OC_DBG("no block options; processing regular request");
 #ifdef OC_TCP
@@ -382,7 +390,7 @@ coap_receive(oc_message_t *msg)
                     oc_blockwise_handle_block(request_buffer, 0, incoming_block,
                                               (uint16_t)incoming_block_len))) {
                 OC_ERR("could not create buffer to hold request payload");
-                goto init_reset_message;
+                goto init_reset_message_with_transaction;
               }
               if (message->uri_query_len > 0) {
                 oc_new_string(&request_buffer->uri_query, message->uri_query,
@@ -395,9 +403,9 @@ coap_receive(oc_message_t *msg)
           } else {
             OC_ERR("incoming payload size exceeds block size");
           }
-          goto init_reset_message;
+          goto init_reset_message_with_transaction;
         }
-#else  /* OC_BLOCK_WISE */
+#else /* OC_BLOCK_WISE */
         if (block1 || block2) {
           goto init_reset_message;
         }
@@ -457,7 +465,12 @@ coap_receive(oc_message_t *msg)
         }
 #endif /* OC_BLOCK_WISE */
         if (response->code != 0) {
+
+#ifdef OC_BLOCK_WISE
+          goto send_message_with_transaction;
+#else  /* OC_BLOCK_WISE */
           goto send_message;
+#endif /* !OC_BLOCK_WISE */
         }
       }
     } else {
@@ -516,7 +529,8 @@ coap_receive(oc_message_t *msg)
         }
         if (payload) {
           OC_DBG("dispatching next block");
-          transaction = coap_new_transaction(response_mid, &msg->endpoint);
+          if (!transaction)
+            transaction = coap_new_transaction(response_mid, &msg->endpoint);
           if (transaction) {
             coap_udp_init_message(response, COAP_TYPE_CON, client_cb->method,
                               response_mid);
@@ -586,7 +600,8 @@ coap_receive(oc_message_t *msg)
           OC_DBG("processing incoming block");
           if (block2 && block2_more) {
             OC_DBG("issuing request for next block");
-            transaction = coap_new_transaction(response_mid, &msg->endpoint);
+            if (!transaction)
+              transaction = coap_new_transaction(response_mid, &msg->endpoint);
             if (transaction) {
               coap_udp_init_message(response, COAP_TYPE_CON, client_cb->method,
                                 response_mid);
@@ -612,6 +627,7 @@ coap_receive(oc_message_t *msg)
 #ifdef OC_BLOCK_WISE
         oc_ri_invoke_client_cb(message, &response_buffer, client_cb,
                                &msg->endpoint);
+
         goto free_blockwise_buffers;
 #else  /* OC_BLOCK_WISE */
         oc_ri_invoke_client_cb(message, client_cb, &msg->endpoint);
@@ -620,6 +636,13 @@ coap_receive(oc_message_t *msg)
 #endif /* OC_CLIENT */
     }
   }
+#ifdef OC_BLOCK_WISE
+  goto init_reset_message;
+init_reset_message_with_transaction:
+  /* create transaction */
+  if (!transaction)
+    transaction = coap_new_transaction(message->mid, &msg->endpoint);
+#endif
 
 init_reset_message:
 #ifdef OC_TCP
@@ -642,6 +665,14 @@ free_blockwise_buffers:
   }
 #endif /* OC_BLOCK_WISE */
 
+#ifdef OC_BLOCK_WISE
+  goto send_message;
+send_message_with_transaction:
+  /* create transaction */
+  if (!transaction)
+    transaction = coap_new_transaction(message->mid, &msg->endpoint);
+#endif /* OC_BLOCK_WISE */
+
 send_message:
   if (coap_status_code == COAP_NO_ERROR) {
     if (transaction) {
-- 
2.16.1.windows.1

