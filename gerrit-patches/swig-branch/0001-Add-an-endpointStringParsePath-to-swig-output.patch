From 4a274adfcfba62fb4686476409532727edfa1848 Mon Sep 17 00:00:00 2001
From: George Nash <george.nash@intel.com>
Date: Fri, 1 Nov 2019 14:53:18 -0700
Subject: [PATCH] Add an endpointStringParsePath to swig output

Change-Id: Ifb430666bdf40037ff4a4c0b8708ae53edf79183
Signed-off-by: George Nash <george.nash@intel.com>
---
 .../junit/org/iotivity/OCEndpointTest.java         | 92 ++++++++++++---------
 swig/swig_interfaces/oc_endpoint.i                 | 96 +++++++++++++++++++++-
 2 files changed, 148 insertions(+), 40 deletions(-)

diff --git a/swig/iotivity-lite-java/junit/org/iotivity/OCEndpointTest.java b/swig/iotivity-lite-java/junit/org/iotivity/OCEndpointTest.java
index 8f73c2ba..27d2cb8e 100644
--- a/swig/iotivity-lite-java/junit/org/iotivity/OCEndpointTest.java
+++ b/swig/iotivity-lite-java/junit/org/iotivity/OCEndpointTest.java
@@ -8,11 +8,10 @@ public class OCEndpointTest {
 
     @Test
     public void testStringToEndpoint() {
-        String[] uri = new String[1];
         // IPV4 with port and uri
         OCEndpoint ep = null;
         try {
-            ep = OCEndpointUtil.stringToEndpoint("coaps://10.211.55.3:56789/a/light", uri);
+            ep = OCEndpointUtil.stringToEndpoint("coaps://10.211.55.3:56789/a/light");
         } catch (OCEndpointParseException e) {
             e.printStackTrace();
             fail("stringToEndpoint threw exception when it was not expected.");
@@ -22,13 +21,12 @@ public class OCEndpointTest {
         assertEquals(OCTransportFlags.SECURED, ep.getFlags() & OCTransportFlags.SECURED);
         assertNotEquals(OCTransportFlags.TCP, ep.getFlags() & OCTransportFlags.TCP);
         assertEquals(56789, ep.getAddr().getIpv4().getPort());
-        assertEquals("/a/light", uri[0]);
         assertArrayEquals(new short[]{10, 211, 55, 3}, ep.getAddr().getIpv4().getAddress());
         OCEndpointUtil.freeEndpoint(ep);
 
         // IPV6
         try {
-            ep = OCEndpointUtil.stringToEndpoint("coap://[ff02::158]", uri);
+            ep = OCEndpointUtil.stringToEndpoint("coap://[ff02::158]");
         } catch (OCEndpointParseException e) {
             e.printStackTrace();
             fail("stringToEndpoint threw exception when it was not expected.");
@@ -38,14 +36,13 @@ public class OCEndpointTest {
         assertNotEquals(OCTransportFlags.SECURED, (ep.getFlags() & OCTransportFlags.SECURED));
         assertNotEquals(OCTransportFlags.TCP, (ep.getFlags() & OCTransportFlags.TCP));
         assertEquals(5683, ep.getAddr().getIpv6().getPort());
-        assertNull(uri[0]);
         assertArrayEquals(new short[]{0xff, 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x01, 0x58},
                 ep.getAddr().getIpv6().getAddress());
         OCEndpointUtil.freeEndpoint(ep);
 
         // IPV6 with uri
         try {
-            ep = OCEndpointUtil.stringToEndpoint("coaps://[ff02::158]/a/light", uri);
+            ep = OCEndpointUtil.stringToEndpoint("coaps://[ff02::158]/a/light");
         } catch (OCEndpointParseException e) {
             e.printStackTrace();
             fail("stringToEndpoint threw exception when it was not expected.");
@@ -55,14 +52,13 @@ public class OCEndpointTest {
         assertEquals(OCTransportFlags.SECURED, (ep.getFlags() & OCTransportFlags.SECURED));
         assertNotEquals(OCTransportFlags.TCP, (ep.getFlags() & OCTransportFlags.TCP));
         assertEquals(5684, ep.getAddr().getIpv6().getPort());
-        assertEquals("/a/light", uri[0]);
         assertArrayEquals(new short[]{0xff, 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x01, 0x58},
                 ep.getAddr().getIpv6().getAddress());
         OCEndpointUtil.freeEndpoint(ep);
 
         // IPV6 with port and uri
         try {
-            ep = OCEndpointUtil.stringToEndpoint("coaps://[fe80::12]:2439/a/light", uri);
+            ep = OCEndpointUtil.stringToEndpoint("coaps://[fe80::12]:2439/a/light");
         } catch (OCEndpointParseException e) {
             e.printStackTrace();
             fail("stringToEndpoint threw exception when it was not expected.");
@@ -72,7 +68,6 @@ public class OCEndpointTest {
         assertEquals(OCTransportFlags.SECURED, (ep.getFlags() & OCTransportFlags.SECURED));
         assertNotEquals(OCTransportFlags.TCP, (ep.getFlags() & OCTransportFlags.TCP));
         assertEquals(2439, ep.getAddr().getIpv6().getPort());
-        assertEquals("/a/light", uri[0]);
         assertArrayEquals(new short[]{0xfe, 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x12},
                 ep.getAddr().getIpv6().getAddress());
         OCEndpointUtil.freeEndpoint(ep);
@@ -81,11 +76,10 @@ public class OCEndpointTest {
     // The tests will fail on Windows. It does not yet support dns lookup.
     @Test
     public void testStringToEndpoint_dns_lookup() {
-        String[] uri = new String[1];
         // dns lookup
         OCEndpoint ep = null;
         try {
-            ep = OCEndpointUtil.stringToEndpoint("coap://openconnectivity.org", uri);
+            ep = OCEndpointUtil.stringToEndpoint("coap://openconnectivity.org");
         } catch (OCEndpointParseException e) {
             e.printStackTrace();
             fail("stringToEndpoint threw exception when it was not expected.");
@@ -96,12 +90,11 @@ public class OCEndpointTest {
         assertNotEquals(OCTransportFlags.SECURED, ep.getFlags() & OCTransportFlags.SECURED);
         assertNotEquals(OCTransportFlags.TCP, ep.getFlags() & OCTransportFlags.TCP);
         assertEquals(5683, ep.getAddr().getIpv4().getPort());
-        assertNull(uri[0]);
         OCEndpointUtil.freeEndpoint(ep);
 
         // dns lookup with uri
         try {
-            ep = OCEndpointUtil.stringToEndpoint("coap://openconnectivity.org/alpha", uri);
+            ep = OCEndpointUtil.stringToEndpoint("coap://openconnectivity.org/alpha");
         } catch (OCEndpointParseException e) {
             e.printStackTrace();
             fail("stringToEndpoint threw exception when it was not expected.");
@@ -112,12 +105,11 @@ public class OCEndpointTest {
         assertNotEquals(OCTransportFlags.SECURED, ep.getFlags() & OCTransportFlags.SECURED);
         assertNotEquals(OCTransportFlags.TCP, ep.getFlags() & OCTransportFlags.TCP);
         assertEquals(5683, ep.getAddr().getIpv4().getPort());
-        assertEquals("/alpha", uri[0]);
         OCEndpointUtil.freeEndpoint(ep);
 
         // dns lookup with port and uri
         try {
-            ep = OCEndpointUtil.stringToEndpoint("coaps://openconnectivity.org:3456/alpha", uri);
+            ep = OCEndpointUtil.stringToEndpoint("coaps://openconnectivity.org:3456/alpha");
         } catch (OCEndpointParseException e) {
             e.printStackTrace();
             fail("stringToEndpoint threw exception when it was not expected.");
@@ -128,18 +120,16 @@ public class OCEndpointTest {
         assertEquals(OCTransportFlags.SECURED, ep.getFlags() & OCTransportFlags.SECURED);
         assertNotEquals(OCTransportFlags.TCP, ep.getFlags() & OCTransportFlags.TCP);
         assertEquals(3456, ep.getAddr().getIpv4().getPort());
-        assertEquals("/alpha", uri[0]);
         OCEndpointUtil.freeEndpoint(ep);
     }
 
     // The tests will fail on Windows. It does not yet support tcp.
     @Test
     public void testStringToEndpoint_tcp() {
-        String[] uri = new String[1];
         // IPv4 over tcp and uri
         OCEndpoint ep = null;
         try {
-            ep = OCEndpointUtil.stringToEndpoint("coaps+tcp://10.211.55.3/a/light", uri);
+            ep = OCEndpointUtil.stringToEndpoint("coaps+tcp://10.211.55.3/a/light");
         } catch (OCEndpointParseException e) {
             e.printStackTrace();
             fail("stringToEndpoint threw exception when it was not expected.");
@@ -149,13 +139,12 @@ public class OCEndpointTest {
         assertEquals(OCTransportFlags.SECURED, ep.getFlags() & OCTransportFlags.SECURED);
         assertEquals(OCTransportFlags.TCP, ep.getFlags() & OCTransportFlags.TCP);
         assertEquals(5684, ep.getAddr().getIpv4().getPort());
-        assertEquals("/a/light", uri[0]);
         assertArrayEquals(new short[]{10, 211, 55, 3}, ep.getAddr().getIpv4().getAddress());
         OCEndpointUtil.freeEndpoint(ep);
 
         // IPv4 over tcp and port
         try {
-            ep = OCEndpointUtil.stringToEndpoint("coap+tcp://1.2.3.4:2568", uri);
+            ep = OCEndpointUtil.stringToEndpoint("coap+tcp://1.2.3.4:2568");
         } catch (OCEndpointParseException e) {
             e.printStackTrace();
             fail("stringToEndpoint threw exception when it was not expected.");
@@ -165,13 +154,12 @@ public class OCEndpointTest {
         assertNotEquals(OCTransportFlags.SECURED, (ep.getFlags() & OCTransportFlags.SECURED));
         assertEquals(OCTransportFlags.TCP, (ep.getFlags() & OCTransportFlags.TCP));
         assertEquals(2568, ep.getAddr().getIpv4().getPort());
-        assertNull(uri[0]);
         assertArrayEquals(new short[]{1, 2, 3, 4}, ep.getAddr().getIpv4().getAddress());
         OCEndpointUtil.freeEndpoint(ep);
 
         // IPv6 over tcp  
         try {
-            ep = OCEndpointUtil.stringToEndpoint("coap+tcp://[ff02::158]", uri);
+            ep = OCEndpointUtil.stringToEndpoint("coap+tcp://[ff02::158]");
         } catch (OCEndpointParseException e) {
             e.printStackTrace();
             fail("stringToEndpoint threw exception when it was not expected.");
@@ -181,14 +169,13 @@ public class OCEndpointTest {
         assertNotEquals(OCTransportFlags.SECURED, (ep.getFlags() & OCTransportFlags.SECURED));
         assertEquals(OCTransportFlags.TCP, (ep.getFlags() & OCTransportFlags.TCP));
         assertEquals(5683, ep.getAddr().getIpv6().getPort());
-        assertNull(uri[0]);
         assertArrayEquals(new short[]{0xff, 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x01, 0x58},
                 ep.getAddr().getIpv6().getAddress());
         OCEndpointUtil.freeEndpoint(ep);
 
         // IPv6 over tcp with uri
         try {
-            ep = OCEndpointUtil.stringToEndpoint("coaps+tcp://[ff02::158]/a/light", uri);
+            ep = OCEndpointUtil.stringToEndpoint("coaps+tcp://[ff02::158]/a/light");
         } catch (OCEndpointParseException e) {
             e.printStackTrace();
             fail("stringToEndpoint threw exception when it was not expected.");
@@ -198,14 +185,13 @@ public class OCEndpointTest {
         assertEquals(OCTransportFlags.SECURED, (ep.getFlags() & OCTransportFlags.SECURED));
         assertEquals(OCTransportFlags.TCP, (ep.getFlags() & OCTransportFlags.TCP));
         assertEquals(5684, ep.getAddr().getIpv6().getPort());
-        assertEquals("/a/light", uri[0]);
         assertArrayEquals(new short[]{0xff, 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x01, 0x58},
                 ep.getAddr().getIpv6().getAddress());
         OCEndpointUtil.freeEndpoint(ep);
 
         // IPv6 over tcp with port and uri 
         try {
-            ep = OCEndpointUtil.stringToEndpoint("coaps+tcp://[fe80::12]:2439/a/light", uri);
+            ep = OCEndpointUtil.stringToEndpoint("coaps+tcp://[fe80::12]:2439/a/light");
         } catch (OCEndpointParseException e) {
             e.printStackTrace();
             fail("stringToEndpoint threw exception when it was not expected.");
@@ -215,7 +201,6 @@ public class OCEndpointTest {
         assertEquals(OCTransportFlags.SECURED, (ep.getFlags() & OCTransportFlags.SECURED));
         assertEquals(OCTransportFlags.TCP, (ep.getFlags() & OCTransportFlags.TCP));
         assertEquals(2439, ep.getAddr().getIpv6().getPort());
-        assertEquals("/a/light", uri[0]);
         assertArrayEquals(new short[]{0xfe, 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x12},
                 ep.getAddr().getIpv6().getAddress());
         OCEndpointUtil.freeEndpoint(ep);
@@ -224,11 +209,10 @@ public class OCEndpointTest {
     // The tests will fail on Windows. It does not yet support tcp or dns lookup.
     @Test
     public void testStringToEndpoint_tcp_and_dns_lookup() {
-        String[] uri = new String[1];
         // dns lookup over tcp with port
         OCEndpoint ep = null;
         try {
-            ep = OCEndpointUtil.stringToEndpoint("coaps+tcp://openconnectivity.org:3456", uri);
+            ep = OCEndpointUtil.stringToEndpoint("coaps+tcp://openconnectivity.org:3456");
         } catch (OCEndpointParseException e) {
             e.printStackTrace();
             fail("stringToEndpoint threw exception when it was not expected.");
@@ -239,7 +223,6 @@ public class OCEndpointTest {
         assertEquals(OCTransportFlags.SECURED, ep.getFlags() & OCTransportFlags.SECURED);
         assertEquals(OCTransportFlags.TCP, ep.getFlags() & OCTransportFlags.TCP);
         assertEquals(3456, ep.getAddr().getIpv4().getPort());
-        assertNull(uri[0]);
         OCEndpointUtil.freeEndpoint(ep);
     }
 
@@ -258,9 +241,8 @@ public class OCEndpointTest {
     @Test
     public void test_throw_exception_on_setDi_when_di_null() {
         try {
-            String[] uri = new String[1];
             // IPV4 with port and uri
-            OCEndpoint ep = OCEndpointUtil.stringToEndpoint("coaps://10.211.55.3:56789/a/light", uri);
+            OCEndpoint ep = OCEndpointUtil.stringToEndpoint("coaps://10.211.55.3:56789/a/light");
             assertNotNull(ep);
             OCEndpointUtil.setDi(ep, null);
             fail("The call to setDi when di is null should thow an exception.");
@@ -272,10 +254,9 @@ public class OCEndpointTest {
 
     @Test
     public void test_throw_parse_exception_stringToEndpoint() {
-        String[] uri = new String[1];
         OCEndpoint ep = null;
         try {
-            ep = OCEndpointUtil.stringToEndpoint("", uri);
+            ep = OCEndpointUtil.stringToEndpoint("");
             fail("The call stringToEndpoint should throw an exception");
         } catch (Exception e) {
             assertEquals(OCEndpointParseException.class, e.getClass());
@@ -284,7 +265,7 @@ public class OCEndpointTest {
 
         try {
             // will fail does not have `://`
-            ep = OCEndpointUtil.stringToEndpoint("coaps+tcp", uri);
+            ep = OCEndpointUtil.stringToEndpoint("coaps+tcp");
             fail("The call stringToEndpoint should throw an exception");
         } catch (Exception e) {
             assertEquals(OCEndpointParseException.class, e.getClass());
@@ -292,14 +273,14 @@ public class OCEndpointTest {
         }
 
         try {
-            ep = OCEndpointUtil.stringToEndpoint("foobar", uri);
+            ep = OCEndpointUtil.stringToEndpoint("foobar");
             fail("The call stringToEndpoint should throw an exception");
         } catch (Exception e) {
             assertEquals(OCEndpointParseException.class, e.getClass());
             assertEquals("The \"foobar\" string cannot be parsed.", e.getMessage());
         }
         try {
-            ep = OCEndpointUtil.stringToEndpoint(null, uri);
+            ep = OCEndpointUtil.stringToEndpoint(null);
             fail("The call stringToEndpoint should throw an exception");
         } catch (Exception e) {
             assertEquals(OCEndpointParseException.class, e.getClass());
@@ -307,4 +288,41 @@ public class OCEndpointTest {
         }
         assertNull(ep);
     }
+    
+    @Test
+    public void testEndpointStringToUri()
+    {
+        try {
+            assertEquals("/a/light", OCEndpointUtil.endpointStringParsePath("coaps://10.211.55.3:56789/a/light"));
+            assertEquals("", OCEndpointUtil.endpointStringParsePath("coap://openconnectivity.org"));
+            assertEquals("/alpha", OCEndpointUtil.endpointStringParsePath("coap://openconnectivity.org/alpha"));
+            assertEquals("/alpha", OCEndpointUtil.endpointStringParsePath("coaps://openconnectivity.org:3456/alpha"));
+            assertEquals("/a/light", OCEndpointUtil.endpointStringParsePath("coaps+tcp://10.211.55.3/a/light"));
+            assertEquals("", OCEndpointUtil.endpointStringParsePath("coap+tcp://1.2.3.4:2568"));
+            assertEquals("", OCEndpointUtil.endpointStringParsePath("coaps+tcp://openconnectivity.org:3456"));
+            assertEquals("", OCEndpointUtil.endpointStringParsePath("coap+tcp://[ff02::158]"));
+            assertEquals("/a/light", OCEndpointUtil.endpointStringParsePath("coaps+tcp://[ff02::158]/a/light"));
+            assertEquals("/a/light", OCEndpointUtil.endpointStringParsePath("coaps+tcp://[fe80::12]:2439/a/light"));
+
+            assertEquals("/", OCEndpointUtil.endpointStringParsePath("coaps+tcp://[fe80::12]:2439/"));
+        //} catch (OCEndpointParseException e) {
+        } catch (Exception e) {
+            e.printStackTrace();
+            fail("stringToEndpoint threw exception when it was not expected.");
+        }
+
+        try {
+            assertNull(OCEndpointUtil.endpointStringParsePath("foo"));
+        } catch (Exception e) {
+            assertEquals(OCEndpointParseException.class, e.getClass());
+            assertEquals("The \"foo\" string cannot be parsed.", e.getMessage());
+        }
+
+        try {
+            assertNull(OCEndpointUtil.endpointStringParsePath(null));
+        } catch (Exception e) {
+            assertEquals(OCEndpointParseException.class, e.getClass());
+            assertEquals("The (null) string cannot be parsed.", e.getMessage());
+        }
+    }
 }
diff --git a/swig/swig_interfaces/oc_endpoint.i b/swig/swig_interfaces/oc_endpoint.i
index cc7b06f3..ab9dd874 100644
--- a/swig/swig_interfaces/oc_endpoint.i
+++ b/swig/swig_interfaces/oc_endpoint.i
@@ -120,10 +120,100 @@ SWIGEXPORT jobject JNICALL Java_org_iotivity_OCEndpointUtilJNI_toString(JNIEnv *
 }
 %}
 
-
 %apply oc_string_t *INPUT { oc_string_t *endpoint_str };
+%apply oc_string_t *INPUT { oc_string_t *endpointStr };
 %apply oc_string_t *OUTPUT { oc_string_t *uri };
 
+%{
+#ifdef __cplusplus
+extern "C"
+#endif
+static int oc_endpoint_string_parse_path(oc_string_t *endpoint_str, oc_string_t *path)
+{
+  if (!endpoint_str) {
+    return -1;
+  }
+  if (!path) {
+    return -1;
+  }
+
+  const char *address = NULL;
+
+  address = strstr(oc_string(*endpoint_str), "://");
+  if(!address) {
+    return -1;
+  }
+  // 3 is string length of "://"
+  address += 3;
+
+  size_t len = oc_string_len(*endpoint_str) - (address - oc_string(*endpoint_str));
+
+  // the smallest possible address is '0' anything smaller is invalid.
+  if(len < 1) {
+    return -1;
+  }
+  /* Extract a uri path if available */
+  const char *path_start = NULL;
+  const char *query_start = NULL;
+
+  path_start = memchr(address, '/', len);
+  if (path_start) {
+    query_start = memchr((address + (path_start - address)), '?', (len - (path_start - address)));
+    if (query_start) {
+      oc_new_string(path, path_start, (query_start - path_start));
+    } else {
+      oc_new_string(path, path_start, (len - (path_start - address)));
+    }
+  } else {
+    // no path found return an empty string
+    oc_new_string(path, "", 0);
+  }
+  return 0;
+}
+%}
+
+%javaexception("OCEndpointParseException") endpointStringParsePath {
+  if (!jarg1) {
+    jclass cls_OCEndpointParseException = JCALL1(FindClass, jenv, "org/iotivity/OCEndpointParseException");
+    assert(cls_OCEndpointParseException);
+    JCALL2(ThrowNew, jenv, cls_OCEndpointParseException, "The (null) string cannot be parsed.");
+    return $null;
+  }
+  $action
+  if(!result) {
+    OC_DBG("JNI: String can not be parsed.");
+    jclass cls_OCEndpointParseException = JCALL1(FindClass, jenv, "org/iotivity/OCEndpointParseException");
+    assert(cls_OCEndpointParseException);
+    oc_string_t exception_message_part1;
+    oc_concat_strings(&exception_message_part1, "The \"", oc_string(*arg1));
+    oc_string_t exception_message;
+    oc_concat_strings(&exception_message, oc_string(exception_message_part1), "\" string cannot be parsed.");
+    JCALL2(ThrowNew, jenv, cls_OCEndpointParseException, ((char *)oc_string(exception_message)));
+    oc_free_string(&exception_message_part1);
+    oc_free_string(&exception_message);
+  }
+}
+%newobject endpointStringParsePath;
+%inline %{
+char* endpointStringParsePath(oc_string_t *endpointStr)
+{
+  char *return_value;
+  oc_string_t path;
+  if(0 == oc_endpoint_string_parse_path(endpointStr, &path))
+  {
+    return_value = (char *)malloc(oc_string_len(path) + 1);
+    strncpy(return_value, oc_string(path), oc_string_len(path));
+    return_value[oc_string_len(path)] = '\0';
+    oc_free_string(&path);
+    return return_value;
+  } else {
+   oc_free_string(&path);
+   return NULL;
+  }
+}
+%}
+
+
 %javaexception("OCEndpointParseException") jni_string_to_endpoint {
   if (!jarg1) {
     jclass cls_OCEndpointParseException = JCALL1(FindClass, jenv, "org/iotivity/OCEndpointParseException");
@@ -149,10 +239,10 @@ SWIGEXPORT jobject JNICALL Java_org_iotivity_OCEndpointUtilJNI_toString(JNIEnv *
 %ignore oc_string_to_endpoint;
 %rename(stringToEndpoint) jni_string_to_endpoint;
 %inline %{
-oc_endpoint_t * jni_string_to_endpoint(oc_string_t *endpoint_str, oc_string_t *uri) {
+oc_endpoint_t * jni_string_to_endpoint(oc_string_t *endpoint_str) {
   OC_DBG("JNI: %s\n", __func__);
   oc_endpoint_t *ep = oc_new_endpoint();
-  if(oc_string_to_endpoint(endpoint_str, ep, uri) < 0) {
+  if(oc_string_to_endpoint(endpoint_str, ep, NULL) < 0) {
     OC_DBG("JNI: oc_string_to_endpoint failed to parse %s\n", oc_string(*endpoint_str));
     oc_free_endpoint(ep);
     return NULL;
-- 
2.16.1.windows.1

